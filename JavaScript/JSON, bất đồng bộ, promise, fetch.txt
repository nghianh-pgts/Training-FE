#JSON là gì ?
- JSON (JavaScript Object Notation) là một định dạng dữ liệu nhẹ, được sử dụng để trao đổi dữ liệu giữa máy khách và máy chủ, hoặc giữa các hệ thống. JSON rất phổ biến nhờ cú pháp đơn giản, dễ đọc và dễ phân tích.
- cú pháp:
+ Dữ liệu JSON được biểu diễn dưới dạng cặp key-value.
+ JSON chỉ hỗ trợ một số kiểu dữ liệu: chuỗi, số, mảng, đối tượng, giá trị logic (true, false), và null.

ví dụ:
    {
  "name": "John Doe",
  "age": 30,
  "isEmployed": true,
  "skills": ["JavaScript", "Python", "Java"],
  "address": {
    "city": "New York",
    "zipCode": "10001"
  }
}

- chuyển đổi từ JSON qua JS Object (sử dụng parse() )
const jsonData = '{"name": "John", "age": 25}';
const obj = JSON.parse(jsonData);
console.log(obj.name); // "John"

- chuyển đổi từ JS Object qua JSON ( sử dụng stringify() )
const obj = { name: "John", age: 25 };
const jsonData = JSON.stringify(obj);
console.log(jsonData); // '{"name":"John","age":25}'

#Đồng bộ và bất đồng bộ
1. đồng bộ (Synchronous)
- Các tác vụ được thực thi tuần tự, câu lệnh sau phải đợi câu lệnh trước hoàn thành.

2. Bất đồng bộ (Asynchronous)
- Các tác vụ có thể chạy song song, không cần đợi các tác vụ khác hoàn thành.

#Promise trong JavaScript
- Promise là một cách xử lý tác vụ bất đồng bộ. Nó đại diện cho một giá trị có thể được xử lý ngay bây giờ, trong tương lai, hoặc không bao giờ.
- Promise giải quyết vấn đề callback hell

- Trạng thái có Promise:
+ Pending: Đang chờ xử lí
+ Fullfilled: Thành công, trả về giá trị resovled
+ Rejected: Thất bại, trả về lỗi Rejected

- cú pháp tạo promise 
    const myPromise = new Promise((resolve, reject) => {
  const success = true;
  if (success) {
    resolve("Thành công!");
  } else {
    reject("Thất bại!");
  }
});

//Đối số của 1 promise sẽ là 1 hàm callback - gọi là executor trả về 2 tham số là resolve, reject

myPromise
  .then((result) => console.log(result)) // Xử lý khi thành công
  .catch((error) => console.error(error)); // Xử lý khi thất bại
    .finally(callback func) //khi 1 trong 2 được gọi

#Fetch API trong js
- Fetch là một API tích hợp sẵn trong JavaScript để thực hiện các yêu cầu HTTP (GET, POST, PUT, DELETE, v.v.).

- cú pháp fetch API
	fetch(url)
	.then(response => response.json()) //fetch trả về response -> cần sử dụng .json để xử lí trả ra 1 promise 
	.then(data => console.log(data)) //sử dụng chaining promise để hứng kqua trả ra

#Async/Await trong js
- async/await là cú pháp hiện đại dựa trên Promise, giúp viết mã bất đồng bộ dễ đọc và dễ hiểu hơn.
- Cách sử dụng:
    + Dùng từ khóa async trước một hàm để báo rằng hàm này sẽ trả về một Promise.
    + Dùng từ khóa await để "chờ" một Promise hoàn thành.

ví dụ:
    async function fetchData() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
        const data = await response.json();
        console.log(data);
    } catch (error) {
        console.error('Error:', error);
    }
    }

    fetchData();