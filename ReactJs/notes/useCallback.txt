#Usecallback
- useCallback là một React Hook cho phép lưu định nghĩa hàm vào bộ nhớ đệm giữa các lần
- giúp tránh việc tạo lại hàm không cần thiết khi component re-render.


cú pháp:
    const memoizedCallback = useCallback(() => {
        // logic của hàm
    }, [dependencies]);

+ memoizedCallback: Hàm đã được ghi nhớ.
+ dependencies: Mảng phụ thuộc, nếu giá trị trong mảng thay đổi, hàm sẽ được tạo lại. nếu dependencies trống, nó sẽ trả lại tham chiếu của lần chạy trước đó


#Khi nào nên sử dụng?
- Khi bạn truyền một hàm làm props cho child component để ngăn child component re-render không cần thiết.
- Khi một hàm được sử dụng trong một hook như useEffect và bạn muốn kiểm soát việc tạo lại nó.

- khi sử dụng, cần lồng child component trong memo()

ví dụ: 
import React, { useState, useCallback } from "react";

function Parent() {
  const [count, setCount] = useState(0);

  const handleClick = useCallback(() => {
    console.log("Button clicked!");
  }, []); // Không phụ thuộc, nên hàm không bị tạo lại

  return (
    <div>
      <button onClick={() => setCount(count + 1)}>Increment: {count}</button>
      <Child handleClick={handleClick} />
    </div>
  );
}

function Child({ handleClick }) {
  console.log("Child rendered");
  return <button onClick={handleClick}>Click me</button>;
}

export default Parent;

Trong ví dụ này, handleClick không bị tạo lại khi Parent render, giúp tránh việc render lại không cần thiết của Child.
